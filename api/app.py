from fastapi import FastAPI
from fastapi.responses import StreamingResponse
from utils.chat import chat
from models.user_prompt import UserPrompt
from fastapi.middleware.cors import CORSMiddleware

app = FastAPI()
origins = ["http://localhost:3000", "https://gemini-frontend-git-chat-v1-chiefkarims-projects.vercel.app"]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_methods=["*"],
    allow_headers=["*"]
)


@app.post('/')
async def post_chat(prompt: UserPrompt):
    return StreamingResponse(chat(prompt), media_type='text/plain')


# TODO: clean up unused packages

"Okay, I'll provide code examples in both Node.js (JavaScript) and Python, along with explanations, to illustrate common programming concepts.\n\n**1.  Basic \"Hello, World!\" Example**\n\n   *Node.js (JavaScript)*\n\n   ```javascript\n   // This is a simple Node.js program that prints \"Hello, World!\" to the console.\n\n   console.log(\"Hello, World!\");\n   ```\n\n   *Python*\n\n   ```python\n   # This is a simple Python program that prints \"Hello, World!\" to the console.\n\n   print(\"Hello, World!\")\n   ```\n\n   **Explanation:**\n\n   *   Both examples use the standard output function ( `console.log` in Node.js and `print` in Python) to display the text \"Hello, World!\" on the console. This is the most basic way to confirm that your environment is set up correctly and that you can execute code.\n\n**2.  Variables and Data Types**\n\n   *Node.js (JavaScript)*\n\n   ```javascript\n   // Declaring variables using 'let' (modern JavaScript)\n   let name = \"Alice\";   // String\n   let age = 30;       // Number\n   let isStudent = false; // Boolean\n\n   // Displaying the values of the variables\n   console.log(\"Name:\", name);\n   console.log(\"Age:\", age);\n   console.log(\"Is student?\", isStudent);\n\n   // Changing the value of a variable\n   age = 31;\n   console.log(\"New age:\", age);\n\n   //Constants example\n   const PI = 3.14159;\n   console.log(\"PI:\", PI);\n   //PI = 3.14; //This would throw an error because PI is a constant\n   ```\n\n   *Python*\n\n   ```python\n   # Declaring variables (Python is dynamically typed)\n   name = \"Alice\"  # String\n   age = 30       # Integer\n   is_student = False # Boolean\n\n   # Displaying the values of the variables\n   print(\"Name:\", name)\n   print(\"Age:\", age)\n   print(\"Is student?\", is_student)\n\n   # Changing the value of a variable\n   age = 31\n   print(\"New age:\", age)\n\n   #Constants Example\n   PI = 3.14159\n   print(\"PI:\", PI)\n   #PI = 3.14 #This would not throw an error in python\n   ```\n\n   **Explanation:**\n\n   *   **Variables:** Variables are used to store data. In JavaScript (using `let` or `const`) and Python, you assign a value to a variable name.  JavaScript uses `let` for variables that can be reassigned and `const` for variables that cannot be reassigned. Python doesn't have a keyword for constants; it's a naming convention (using uppercase) to indicate that a variable should be treated as a constant.\n   *   **Data Types:** These examples show strings (text), numbers (integers or floats), and booleans (true/false values).  Python is dynamically typed, meaning you don't explicitly declare the data type of a variable; it's inferred from the assigned value. JavaScript is also dynamically typed, but using TypeScript adds static typing.\n\n**3.  Conditional Statements (if/else)**\n\n   *Node.js (JavaScript)*\n\n   ```javascript\n   let temperature = 25;\n\n   if (temperature > 30) {\n       console.log(\"It's hot!\");\n   } else if (temperature > 20) {\n       console.log(\"It's warm.\");\n   } else {\n       console.log(\"It's cool.\");\n   }\n   ```\n\n   *Python*\n\n   ```python\n   temperature = 25\n\n   if temperature > 30:\n       print(\"It's hot!\")\n   elif temperature > 20:\n       print(\"It's warm.\")\n   else:\n       print(\"It's cool.\")\n   ```\n\n   **Explanation:**\n\n   *   **`if/else if/else`:**  These statements allow you to execute different blocks of code based on conditions. The `if` statement checks the initial condition. If it's true, the code block inside the `if` is executed.  `else if` (or `elif` in Python) provides additional conditions to check if the initial `if` condition is false.  The `else` block is executed if none of the preceding conditions are true.\n   *   **Indentation:**  Python uses indentation (typically 4 spaces) to define code blocks within `if`, `elif`, and `else` statements. JavaScript uses curly braces `{}` to define code blocks.\n\n**4.  Loops (for loop)**\n\n   *Node.js (JavaScript)*\n\n   ```javascript\n   // A for loop that iterates from 0 to 4 (inclusive).\n   for (let i = 0; i < 5; i++) {\n       console.log(\"Iteration:\", i);\n   }\n   ```\n\n   *Python*\n\n   ```python\n   # A for loop that iterates from 0 to 4 (inclusive).\n   for i in range(5):\n       print(\"Iteration:\", i)\n   ```\n\n   **Explanation:**\n\n   *   **`for` loop:** This type of loop is used to repeat a block of code a specific number of times.\n        *   **JavaScript:**  The `for` loop in JavaScript consists of three parts:\n            *   `let i = 0`:  Initialization (executed once at the beginning of the loop).\n            *   `i < 5`:  Condition (checked before each iteration; the loop continues as long as the condition is true).\n            *   `i++`:  Increment (executed after each iteration).\n        *   **Python:** The `range(5)` function generates a sequence of numbers from 0 to 4. The `for` loop iterates through this sequence, assigning each number to the variable `i`.\n\n**5.  Functions**\n\n   *Node.js (JavaScript)*\n\n   ```javascript\n   // Defining a function that adds two numbers.\n   function add(a, b) {\n       return a + b;\n   }\n\n   // Calling the function and storing the result.\n   let sum = add(5, 3);\n   console.log(\"Sum:\", sum);\n\n   //Arrow function example\n   const multiply = (x,y) => {\n        return x * y;\n   }\n\n   let product = multiply(5,3);\n   console.log(\"Product:\", product);\n   ```\n\n   *Python*\n\n   ```python\n   # Defining a function that adds two numbers.\n   def add(a, b):\n       return a + b\n\n   # Calling the function and storing the result.\n   sum = add(5, 3)\n   print(\"Sum:\", sum)\n\n   #Lambda function example\n   multiply = lambda x, y: x * y\n\n   product = multiply(5, 3)\n   print(\"Product:\", product)\n   ```\n\n   **Explanation:**\n\n   *   **Functions:** Functions are reusable blocks of code that perform a specific task. They can take input values (parameters) and return a result.\n        *   **JavaScript:**  Functions are defined using the `function` keyword.  The `return` statement specifies the value that the function should return. Arrow functions are a more concise way to define functions.\n        *   **Python:**  Functions are defined using the `def` keyword.  Indentation is crucial for defining the function's code block.  Lambda functions are anonymous, small functions that can be defined inline.\n\n**6.  Arrays/Lists**\n\n   *Node.js (JavaScript)*\n\n   ```javascript\n   // Creating an array of numbers.\n   let numbers = [1, 2, 3, 4, 5];\n\n   // Accessing elements of the array.\n   console.log(\"First element:\", numbers[0]);\n   console.log(\"Second element:\", numbers[1]);\n\n   // Iterating through the array.\n   for (let i = 0; i < numbers.length; i++) {\n       console.log(\"Element at index\", i, \":\", numbers[i]);\n   }\n   ```\n\n   *Python*\n\n   ```python\n   # Creating a list of numbers.\n   numbers = [1, 2, 3, 4, 5]\n\n   # Accessing elements of the list.\n   print(\"First element:\", numbers[0])\n   print(\"Second element:\", numbers[1])\n\n   # Iterating through the list.\n   for i in range(len(numbers)):\n       print(\"Element at index\", i, \":\", numbers[i])\n\n   #Alternatively\n   for number in numbers:\n       print(\"Element:\", number)\n   ```\n\n   **Explanation:**\n\n   *   **Arrays/Lists:**  Arrays (in JavaScript) and lists (in Python) are used to store collections of items.\n   *   **Indexing:**  Elements in an array/list are accessed using their index (position), starting from 0.\n   *   **Iteration:** You can use a `for` loop to iterate through the elements of an array/list.  Python also offers a more concise way to iterate directly through the elements without using indices (as shown in the alternative example).  In Javascript, you can use the `for...of` loop for the same purpose.\n\n**7. Objects/Dictionaries**\n\n   *Node.js (JavaScript)*\n\n   ```javascript\n   // Creating an object with properties.\n   let person = {\n       name: \"Bob\",\n       age: 40,\n       city: \"New York\"\n   };\n\n   // Accessing properties of the object.\n   console.log(\"Name:\", person.name);\n   console.log(\"Age:\", person.age);\n\n   // Adding a new property to the object.\n   person.occupation = \"Engineer\";\n   console.log(\"Occupation:\", person.occupation);\n   ```\n\n   *Python*\n\n   ```python\n   # Creating a dictionary with key-value pairs.\n   person = {\n       \"name\": \"Bob\",\n       \"age\": 40,\n       \"city\": \"New York\"\n   }\n\n   # Accessing values using keys.\n   print(\"Name:\", person[\"name\"])\n   print(\"Age:\", person[\"age\"])\n\n   # Adding a new key-value pair to the dictionary.\n   person[\"occupation\"] = \"Engineer\"\n   print(\"Occupation:\", person[\"occupation\"])\n   ```\n\n   **Explanation:**\n\n   *   **Objects/Dictionaries:** Objects (in JavaScript) and dictionaries (in Python) are used to store data in key-value pairs.\n   *   **Keys:**  Keys are used to access the corresponding values.  In JavaScript, you can use dot notation (`.`) or bracket notation (`[]`) to access properties.  In Python, you use bracket notation (`[]`) with the key inside the brackets.\n\n**8.  Working with Modules (Node.js) / Importing Libraries (Python)**\n\n   *Node.js (JavaScript)*\n\n   ```javascript\n   // Importing the 'fs' (file system) module.\n   const fs = require('fs');\n\n   // Reading a file (example).\n   fs.readFile('my_file.txt', 'utf8', (err, data) => {\n       if (err) {\n           console.error(\"Error reading file:\", err);\n           return;\n       }\n       console.log(\"File content:\", data);\n   });\n   ```\n\n   *Python*\n\n   ```python\n   # Importing the 'math' module.\n   import math\n\n   # Using a function from the 'math' module.\n   square_root = math.sqrt(16)\n   print(\"Square root:\", square_root)\n   ```\n\n   **Explanation:**\n\n   *   **Modules/Libraries:** Modules (in Node.js) and libraries (in Python) are collections of code that provide additional functionality.\n   *   **Importing:**  You use `require()` in Node.js to import a module.  You use `import` in Python to import a module or specific functions from a module.\n   *   **Using Modules:** After importing, you can access the functions, classes, and variables defined in the module.  In Node.js, the `fs` module is used for file system operations.  In Python, the `math` module provides mathematical functions.\n\n**9.  Error Handling**\n\n   *Node.js (JavaScript)*\n\n   ```javascript\n   try {\n       // Code that might throw an error.\n       let result = 10 / 0; // Division by zero will cause an error.\n       console.log(\"Result:\", result); // This line won't be reached if there's an error.\n   } catch (error) {\n       // Code to handle the error.\n       console.error(\"An error occurred:\", error.message);\n   } finally {\n       // Optional code that always executes, regardless of whether there was an error.\n       console.log(\"Finally block executed.\");\n   }\n   ```\n\n   *Python*\n\n   ```python\n   try:\n       # Code that might raise an exception.\n       result = 10 / 0  # Division by zero will raise an exception.\n       print(\"Result:\", result)  # This line won't be reached if there's an exception.\n   except ZeroDivisionError as e:\n       # Code to handle the exception.\n       print(\"An error occurred:\", e)\n   finally:\n       # Optional code that always executes, regardless of whether there was an exception.\n       print(\"Finally block executed.\")\n   ```\n\n   **Explanation:**\n\n   *   **`try...catch/except...finally`:**  These blocks are used to handle errors (exceptions) that might occur during program execution.\n        *   **`try` block:**  Contains the code that might throw an error.\n        *   **`catch/except` block:**  Executes if an error occurs in the `try` block.  In JavaScript, the `catch` block receives an `error` object containing information about the error. In Python, the `except` block specifies the type of exception to catch (e.g., `ZeroDivisionError`) and provides a variable (e.g., `e`) to access the exception object.\n        *   **`finally` block:**  This block (optional) always executes, whether or not an error occurred. It's often used to clean up resources (e.g., closing files).\n\nThese examples should provide a good starting point for understanding basic programming concepts in Node.js and Python.  Remember to install Node.js and Python on your system and use a text editor or IDE to write and run these examples.  Good luck!\n"
